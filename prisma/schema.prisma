generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL")
}

enum Role {
  DEVELOPER
  ADMIN
  TEATCHER
  MANAGER
  USER
}

enum TicketType {
  BUG
  FEATURE
  QUESTION
  OTHER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}

enum ErrorClassification {
  CERTEZA
  ATENCAO
  INCERTEZA
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  body        String
  users       NotificationToUser[]
  createdAt   DateTime @default(now())
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?
}

model DashboardImage {
  id       String @id @default(cuid())
  imageUrl String
}

model NotificationToUser {
  id String      @id          @default(cuid())
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}

model Busca {
  id     String @id @default(cuid())
  name   String
  busca  Json
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model User {
  id                   String   @id @default(cuid())
  email                String   @unique
  cpf                  String?
  phone                String?
  photoUrl             String   @default("https://static.vecteezy.com/system/resources/previews/008/442/086/original/illustration-of-human-icon-user-symbol-icon-modern-design-on-blank-background-free-vector.jpg")
  name                 String
  asaasId              String?
  password             String
  role                 Role     @default(USER)
  refreshTokens        RefreshToken[]
  simulados            Simulado[]
  responses            Response[]
  totalQuestions       Int
  totalCorrect         Int
  createdAt            DateTime @default(now())
  tickets              Ticket[]
  comments             Comment[]
  notebooks            Notebook[]
  notificationsRead    NotificationToUser[]
  buscas               Busca[]
  notificationsCreated Notification[]
}

model Alternative {
  id         String   @id @default(cuid())
  text       String
  letter     String
  correct    Boolean
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  responses  Response[]
}

model Question {
  id                 String           @id @default(cuid())
  enunciado          String
  alternatives       Alternative[]
  processoSeletivo   ProcessoSeletivo @relation(fields: [processoSeletivoId], references: [id])
  processoSeletivoId String
  ano                Ano?             @relation(fields: [anoId], references: [id])
  anoId              String?
  local              Local?           @relation(fields: [localId], references: [id])
  localId            String?
  perfil             Perfil?          @relation(fields: [perfilId], references: [id])
  perfilId           String?
  area               Area?            @relation(fields: [areaId], references: [id])
  areaId             String?
  subarea            Subarea?         @relation(fields: [subareaId], references: [id])
  subareaId          String?
  estado             Estado?          @relation(fields: [estadoId], references: [id])
  estadoId           String?
  banca              Banca?           @relation(fields: [bancaId], references: [id])
  bancaId            String?
  responses          Response[]
  comments           Comment[]
  notebooks          Notebook[]
  simulados          Simulado[]
  tickets            Ticket[]
  diagnosticos       Diagnostico_Question[]
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  date       DateTime @default(now())
}

model Notebook {
  id          String @id @default(cuid())
  name        String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  questions   Question[]
  responses   Response[]
  description String?
}

model ProcessoSeletivo {
  id        String @id @default(cuid())
  name      String @unique
  questions Question[]
}

model Ano {
  id        String @id @default(cuid())
  ano       Int @unique
  questions Question[]
}

model Local {
  id        String @id @default(cuid())
  name      String @unique
  questions Question[]
}

model Perfil {
  id        String @id @default(cuid())
  name      String @unique
  questions Question[]
}

model Area {
  id        String @id @default(cuid())
  name      String @unique
  questions Question[]
  subareas  Area_Subarea[]
}

model Area_Subarea {
  id        String  @id @default(cuid())
  area      Area    @relation(fields: [areaId], references: [id])
  areaId    String
  subarea   Subarea @relation(fields: [subareaId], references: [id])
  subareaId String
}

model Subarea {
  id        String @id @default(cuid())
  name      String @unique
  questions Question[]
  areas     Area_Subarea[]
}

model Estado {
  id        String @id @default(cuid())
  name      String @unique
  questions Question[]
}

model Banca {
  id        String @id @default(cuid())
  name      String @unique
  questions Question[]
}

model RefreshToken {
  id        String  @id @default(cuid())
  createdAt DateTime
  revoked   Boolean @default(false)
  expiresAt DateTime
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Response {
  id            String      @id @default(cuid())
  date          DateTime    @default(now())
  question      Question    @relation(fields: [questionId], references: [id])
  questionId    String
  alternative   Alternative @relation(fields: [alternativeId], references: [id])
  alternativeId String
  simulado      Simulado?   @relation(fields: [simuladoId], references: [id])
  simuladoId    String?
  notebook      Notebook?   @relation(fields: [notebookId], references: [id])
  notebookId    String?
  correct       Boolean
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  motivo        ErrorClassification?
}

model Simulado {
  id             String     @id @default(cuid())
  name           String
  questions      Question[]
  responses      Response[]
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  createdAt      DateTime   @default(now())
  totalQuestions Int
  totalMinutes   Int
  sequence       String?
}

model Ticket {
  id         String       @id @default(cuid())
  content    String
  type       TicketType
  status     TicketStatus @default(OPEN)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime     @default(now())
  question   Question?    @relation(fields: [questionId], references: [id])
  questionId String?
}

model Oferta {
  id           String @id @default(cuid())
  name         String @unique
  imageUrl     String?
  preco        Float
  text         String?
  features     String[]
  unvavailable String[]
}

model Diagnostico_Question {
  id             String      @id @default(cuid())
  question       Question    @relation(fields: [questionId], references: [id])
  questionId     String
  diagnostico    Diagnostico @relation(fields: [diagnosticoId], references: [id])
  diagnosticoId  String
}

model Diagnostico {
  id        String @id @default(cuid())
  name      String @unique
  questions Diagnostico_Question[]
}

model Imagem {
  id       String @id @default(cuid())
  imageUrl String
}
