generator client {
  provider = "prisma-client-js"
  engineType = "binary"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DEVELOPER
  ADMIN
  USER
}

enum TicketType {
  BUG
  FEATURE
  QUESTION
  OTHER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}

model User {
  id             String @id @default(cuid())
  email          String @unique
  name           String
  password       String
  role           Role   @default(USER)
  refreshTokens  RefreshToken[]
  simulados      Simulado[]
  responses      Response[]
  totalQuestions Int
  totalCorrect   Int
  createdAt      DateTime
  tickets        Ticket[]
  comments       Comment[]
  notebooks      Notebook[]
}

model Alternative {
  id         String   @id @default(cuid())
  text       String
  letter     String
  correct    Boolean
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  responses  Response[]
}

model Question {
  id                 String           @id @default(cuid())
  enunciado          String
  alternatives       Alternative[]
  processoSeletivo   ProcessoSeletivo @relation(fields: [processoSeletivoId], references: [id])
  processoSeletivoId String
  ano                Ano?             @relation(fields: [anoId], references: [id])
  anoId              String?
  local              Local?           @relation(fields: [localId], references: [id])
  localId            String?
  perfil             Perfil?          @relation(fields: [perfilId], references: [id])
  perfilId           String?
  area               Area?            @relation(fields: [areaId], references: [id])
  areaId             String?
  subarea            Subarea?         @relation(fields: [subareaId], references: [id])
  subareaId          String?
  estado             Estado?          @relation(fields: [estadoId], references: [id])
  estadoId           String?
  banca              Banca?           @relation(fields: [bancaId], references: [id])
  bancaId            String?
  responses          Response[]
  comments           Comment[]
  notebooks          Notebook[]
  simulados          Simulado[]
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}
model Notebook {
  id        String @id @default(cuid())
  name      String
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  questions Question[]
}

model ProcessoSeletivo {
  id        String @id @default(cuid())
  name      String @unique
  questions Question[]
}

model Ano {
  id        String @id @default(cuid())
  ano       Int @unique
  questions Question[]
}

model Local {
  id        String @id @default(cuid())
  name      String @unique
  questions Question[]
}

model Perfil {
  id        String @id @default(cuid())
  name      String @unique
  questions Question[]
}

model Area {
  id   String @id @default(cuid())
  name String @unique
  questions Question[]
}

model Subarea {
  id        String @id @default(cuid())
  name      String @unique
  questions Question[]
}

model Estado {
  id        String @id @default(cuid())
  name      String @unique
  questions Question[]
}

model Banca {
  id        String @id @default(cuid())
  name      String @unique
  questions Question[]
}

model RefreshToken {
  id        String  @id @default(cuid())
  createdAt DateTime
  revoked   Boolean @default(false)
  expiresAt DateTime
  user      User    @relation(fields: [userId], references: [id])
  userId    String
}

model Response {
  id            String      @id @default(cuid())
  question      Question    @relation(fields: [questionId], references: [id])
  questionId    String
  alternative   Alternative @relation(fields: [alternativeId], references: [id])
  alternativeId String
  simulado      Simulado?   @relation(fields: [simuladoId], references: [id])
  simuladoId    String?
  correct       Boolean
  user          User        @relation(fields: [userId], references: [id])
  userId        String
}

model Simulado {
  id        String     @id @default(cuid())
  name      String
  questions Question[]
  responses Response[]
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime   @default(now())
}

model Ticket {
  id        String       @id @default(cuid())
  title     String
  content   String
  type      TicketType
  status    TicketStatus @default(OPEN)
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime
}
