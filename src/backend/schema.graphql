type Query {
  me: User
  leaderBoard: [User!]
  users: [User!]!
  filtros: [Filter!]!
  processosSeletivos: [ProcessoSeletivo!]!
  anos: [Ano!]!
  locais: [Local!]!
  perfis: [Perfil!]!
  areas: [AreasResponse!]!
  subareas: [Subarea!]!
  estados: [Estado!]!
  bancas: [Banca!]!
  questions(page: Float = 1, itemsPerPage: Float = 10, text: String, processoSeletivoIds: [String!] = [], anoIds: [String!] = [], localIds: [String!] = [], perfilIds: [String!] = [], areaIds: [String!] = [], subareaIds: [String!] = [], estadoIds: [String!] = [], bancaIds: [String!] = [], apenasRespondidas: Boolean, apenasNaoRespondidas: Boolean, apenasRespondidasCertas: Boolean, apenasRespondidasErradas: Boolean): QuestionsResponse!
  question(id: String!): [Question!]!
  notebooks: [NotebookModel!]!
  notebook(notebookId: String!): NotebookModel!
  simulados(itemsPerPage: Float = 10, page: Float = 1): SimuladosResponse!
  simulado(id: String!): Simulado!
  mostWrong: [MostWrong!]!
  relatorio(lte: LTE!): RelatorioResponse!
  comments(questionId: String!): [Comment!]!
  createQuestion(enunciado: String!, alternatives: [String!]!, correct: Float!, processoSeletivoId: String, newProcessoSeletivo: String, anoId: String, newAno: Float, localId: String, newLocal: String, perfilId: String, newPerfil: String, areaId: String, newArea: String, subAreaId: String, newSubArea: String, estadoId: String, newEstado: String, bancaId: String, newBanca: String): CreateQuestionResponse!
  provas: [ProcessoSeletivo!]!
  raioX(provaId: String!): [RaioX!]!
  notifications: [Notification!]!
  openedRickets: [Ticket!]
}

type User {
  id: ID!
  photoUrl: String!
  email: String!
  name: String!
  totalQuestions: Float!
  totalCorrect: Float!
  role: Role!
}

enum Role {
  USER
  ADMIN
  DEVELOPER
}

type Filter {
  id: ID!
  name: String!
  busca: String!
}

type ProcessoSeletivo {
  id: ID!
  name: String!
}

type Ano {
  id: ID!
  ano: Float!
}

type Local {
  id: ID!
  name: String!
}

type Perfil {
  id: ID!
  name: String!
}

type AreasResponse {
  id: ID!
  name: String!
  count: Float!
}

type Subarea {
  id: ID!
  name: String!
}

type Estado {
  id: ID!
  name: String!
}

type Banca {
  id: ID!
  name: String!
}

type QuestionsResponse {
  questions: [Question!]!
  quantity: Float!
  pagesQuantity: Float!
}

type Question {
  id: ID!
  enunciado: String!
  alternatives: [Alternative!]
  processoSeletivo: ProcessoSeletivo
  ano: Ano
  local: Local
  perfil: Perfil
  area: Area
  subarea: Subarea
  estado: Estado
  banca: Banca
  comments: [Comment!]
}

type Alternative {
  id: ID!
  text: String!
  letter: String!
  correct: Boolean!
}

type Area {
  id: ID!
  name: String!
}

type Comment {
  id: ID!
  content: String!
  user: User!
}

type NotebookModel {
  id: ID!
  name: String!
  description: String
  questions: [Question!]!
}

type SimuladosResponse {
  simulados: [Simulado!]!
  pagesQuantity: Float!
}

type Simulado {
  id: ID!
  name: String!
  totalQuestions: Float!
  totalMinutes: Float!
  questions: [Question!]!
  type: SimuladoType!
}

enum SimuladoType {
  Random
  Custom
}

type MostWrong {
  id: ID!
  text: String!
  alternatives: [MostWrongAlternative!]!
  wrongQuantity: Float!
}

type MostWrongAlternative {
  id: ID!
  letter: String!
  text: String!
  correct: Boolean!
  wrongQuantity: Float!
}

type RelatorioResponse {
  questions: [Questions!]!
  materias: [Materias!]!
  total: Float!
  correto: Float!
}

type Questions {
  date: String!
  total: Float!
  totalCorrect: Float!
}

type Materias {
  nome: String!
  total: Float!
  correto: Float!
}

enum LTE {
  dia
  semana
  mes
  trimestre
  ano
}

type CreateQuestionResponse {
  id: ID!
}

type RaioX {
  area: Area!
  relevancia: Float!
  desempenho: Float!
}

type Notification {
  id: ID!
  title: String!
  body: String!
}

type Ticket {
  id: ID!
  title: String!
  content: String!
  role: TicketType!
  name: User!
  createdAt: DateTime!
  question: Question!
}

enum TicketType {
  BUG
  FEATURE
  QUESTION
  OTHER
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  deleteUser(id: String!): Boolean!
  inviteUser(role: Role!, name: String!, email: String!): User!
  updateProfile(photoUrl: String, name: String): Boolean!
  updatePassword(newPassword: String!, oldPassword: String!): Boolean!
  createFiltro(busca: String!, name: String!): String!
  deleteFiltro(id: String!): Boolean!
  updateProfilePicture(photoUrl: String!): Boolean!
  addAnswer(notebookId: String, simuladoId: String, alternativeId: String!, questionId: String!): AddAnswerResponse!
  addComment(content: String!, questionId: String!): Boolean!
  addNotebook(description: String, name: String!): NotebookModel!
  updateNotebook(questions: [String!], description: String, name: String, notebookId: String!): Boolean!
  deleteNotebook(id: String!): Boolean!
  deleteComment(commentId: String!): Boolean!
  editComment(content: String!, commentId: String!): Boolean!
  addQuestionToNotebook(questionId: String!, id: String!): NotebookModel!
  removeQuestionFromNotebook(questionId: String!, id: String!): NotebookModel!
  createSimulado(quantity: Float, areas: [AreaToSimuladoInput!], type: SimuladoType!, name: String!): Simulado!
  deleteSimulado(id: String!): Boolean!
  updateSimulado(name: String!, id: String!): Boolean!
  createNotification(body: String!, title: String!): Notification!
  readNotifications(notificationIds: [String!]!): Boolean!
  addTicket(questionId: String, type: TicketType!, content: String!): Ticket!
  resolveTicket(id: String!): Boolean!
}

type AddAnswerResponse {
  correct: Boolean!
  correctAlternative: String!
}

input AreaToSimuladoInput {
  areaId: ID!
  quantity: Float!
}
